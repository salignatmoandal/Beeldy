name: CI/CD Go Secure Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  ci:
    name: Build & Secure Go Application
    runs-on: ubuntu-latest

    env:
      GO_VERSION: "1.21"

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      #  Set up Go
      - name: Set up Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      # Install dependencies
      - name: Download Go modules
        run: go mod download

      #  Check formatting
      - name: Run go fmt
        run: |
          fmt_output=$(gofmt -l .)
          if [[ -n "$fmt_output" ]]; then
            echo "The following files are not formatted:"
            echo "$fmt_output"
            exit 1
          fi

      #  Lint with golangci-lint
      - name: Lint with golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout 5m

      #  Static analysis
      - name: Run go vet
        run: go vet ./...

      #  Security static analysis
      - name: Run gosec
        uses: securego/gosec-action@v1
        with:
          args: ./...

      #  Vulnerability check (govulncheck)
      - name: Run govulncheck
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: ${{ env.GO_VERSION }}
          check-latest: true

      #  Docker Build
      - name: Build Docker image
        run: docker build -t beeldy-equipment:latest .

      #  Scan image with Trivy
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@v0.14.0
        with:
          image-ref: beeldy-equipment:latest
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH

      #  Cosign - Sign Docker image
      - name: Sign Docker image with Cosign
        if: github.event_name == 'push'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          echo "${{ secrets.COSIGN_PASSWORD }}" | cosign sign --key cosign.key beeldy-equipment:latest
